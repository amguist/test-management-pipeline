triggers:
  - cron:
      spec: "*/5 * * * *"
      entryPoint: githubPRCleanup

flows:
  githubPRCleanup:
    - log: "Cleaning up existing pull requests created based on IMA testing"
    - set:
        githubToken: "${crypto.exportAsString('Hawkeye', 'github_token', null)}"
        secretValue: "${crypto.exportAsString('Hawkeye', 'hawkeye-kitt-pr-repos', null)}"
        githubProducts: [
          {productName: "test-product"},
          {productName: "opc_ua_test"},
          {productName: "opc-ua-poc"}]
        imaUserName: "amguist"

    - log: "Secret value is ${secretValue}"
    
    - call: perform-cleanup
      withItems: ${githubProducts}

  perform-cleanup:
    - set:
        projectName: ${item.productName}
    - log: "Cleaning up repository: ${projectName}"
    - expr: ${"https://github.com/".concat(organization).concat("/").concat(item.productName).concat(".git")}
      out: apiUrl
    - task: github
      in:
        action: getPRList
        accessToken: ${githubToken}
        org: ${organization}
        repo: ${item.productName}
        base: "main"
        state: "open"
    - if: ${prList.isEmpty()}
      then:
        - log: "No Open PRs to pull details for ..."
      else:
        - expr: ${prList.stream().filter(i -> i.user.login.equals(imaUserName) && i.head.ref.contains("-IMA")).map(c -> {'number':c.number,'branch':c.head.ref,'createTs':c.createdAt}).toList()}
          out: retrievedPullRequests
        - call: clean
          withItems: ${retrievedPullRequests}

  clean:
    - set:
        durationInMinutes: 0
    - script: groovy
      body: |
        import java.util.Date
        import java.text.SimpleDateFormat
        import groovy.time.TimeCategory
        import groovy.time.TimeDuration
        
        def format = 
        def createDate = new SimpleDateFormat(format).format(new Date(1698423069000)).toString()
        def now = new SimpleDateFormat(format).format(new Date()).toString()
  
        createDate = Date.parse("yyyy-MM-dd'T'HH:mm:ssZ" , createDate)
        now = Date.parse("yyyy-MM-dd'T'HH:mm:ssZ" , now)/, /$1$2$3/))
  
        TimeDuration duration = TimeCategory.minus(now, createDate)
        durationInMinutes = duration.getHours()
    - log: "Duration that was calculated is as follows: ${durationInMinutes}"
