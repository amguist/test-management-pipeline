flows:
  performGithubOperations:
    - expr: ${"https://github.com/".concat(organization).concat("/").concat(projectName).concat(".git")}
      out: apiUrl
    - task: github
      in:
        action: ${actionName}
        accessToken: ${githubToken}
        org: ${organization}
        repo: ${projectName}
    - if: ${branchList.contains(entityId)}
      then:
        - checkpoint: "Update_${branch}_${projectName}"
        - call: gitCloneBranch
          in:
            url: ${apiUrl}
      else:
        - checkpoint: "Create_${branch}_${projectName}"
        - call: gitCreateBranch
          in:
            url: ${apiUrl}

  performCleanupOperations:
    - checkpoint: "Clean_Up_${branch}_${projectName}"
    - expr: ${"https://github.com/".concat(organization).concat("/").concat(projectName).concat(".git")}
      out: apiUrl
    - expr: ${pullRequests.stream().filter(i -> projectName.equals(i.projectName)).map(i -> i.prNumber).toList()}
      out: retrievedPullRequests
    - call: gitClosePullRequestPerBranch
      withItems: ${retrievedPullRequests}
    - call: gitDeleteBranch

  gitClosePullRequestPerBranch:
    - log: "Closing Pull Request For ${projectName} with PR Identifier: ${item}"
    - task: github
      in:
        action: "closePR"
        accessToken: ${githubToken}
        org: ${organization}
        repo: ${projectName}
        prId: ${item}

  gitDeleteBranch:
    - task: github
      in:
        action: "deleteBranch"
        accessToken: ${githubToken}
        org: ${organization}
        repo: ${projectName}
        branch: ${branch}

  gitCloneBranch:
    - task: git
      in:
        action: clone
        workingDir: ${projectName}
        auth:
          basic:
            token: ${githubToken}
        baseBranch: ${branch}
        out: "response"
    - if: "${response.ok}"
      then:
        - set:
            filePath: "${workDir}/${projectName}"
        - call: patch-repo-pom-xml
        - call: gitCommitBranch

        - task: github
          in:
            action: getPRList
            accessToken: ${githubToken}
            org: ${organization}
            repo: ${projectName}
            base: ${branch}
            state: "open"
        - if: ${prList.isEmpty()}
          then:
            - log: "No Open PRs to pull details for ..."
          else:
            - log: "Contents Of PR List: ${prList}"
            - expr: ${prList.stream().filter(c -> $branch.equals(c.ref)).map(c -> c.get('number')).toList()}
              out: retrievedPullRequests
            - call: addPullRequestDetails
              withItems: ${retrievedPullRequests}
      else:
        - log: "Error occurred while cloning necessary branch ...."

  addPullRequestDetails:
    - task: github
      in:
        action: "getPR"
        accessToken: ${githubToken}
        org: ${organization}
        repo: ${projectName}
        prNumber: ${item}

    - set:
        pullRequestDetails:
          projectName: ${projectName}
          prNumber: ${item}
          state: "${pr.state}"
          mergeable: "${pr.mergeable}"
          pullRequestUrl: "${pr.htmlUrl}"
    - ${pullRequests.add(pullRequestDetails)}


  gitCreateBranch:
    - task: git
      in:
        action: createBranch
        workingDir: ${projectName}
        auth:
          basic:
            token: ${githubToken}
        baseBranch: "main"
        newBranch: ${branch}
        pushBranch: true
        out: "response"
    - if: "${response.ok}"
      then:
        - set:
            filePath: "${workDir}/${projectName}"
        - call: patch-repo-pom-xml
        - call: gitCommitBranch
        - call: createBranchPR
      else:
        - log: "Error occurred while creating necessary branch ...."

  gitCommitBranch:
    - task: git
      in:
        action: commit
        workingDir: ${projectName}
        auth:
          basic:
            token: ${githubToken}
        baseBranch: ${branch}
        commitMessage: "Updating Branch common.version for IMA Testing"
        commitUsername: "amguist"
        commitEmail: "rhon.guist@gmail.com"
        pushChanges: true
        out: response
    - if: "${!response.ok}"
      then:
        - throw: "Error occurred while performing the commit"

  createBranchPR:
    - task: github
      in:
        action: "createPR"
        accessToken: ${githubToken}
        org: ${organization}
        repo: ${projectName}
        prTitle: "[${branch}-IMA-Test]"
        prBody: ""
        prSourceBranch: ${branch}
        prDestinationBranch: "main"
      out:
        myPrId: ${prId}

    - task: github
      in:
        action: "getPR"
        accessToken: ${githubToken}
        org: ${organization}
        repo: ${projectName}
        prNumber: ${myPrId}

    - set:
        pullRequestDetails:
          projectName: ${projectName}
          prNumber: ${myPrId}
          state: "${pr.state}"
          mergeable: "${pr.mergeable}"
          pullRequestUrl: "${pr.htmlUrl}"
    - ${pullRequests.add(pullRequestDetails)}
